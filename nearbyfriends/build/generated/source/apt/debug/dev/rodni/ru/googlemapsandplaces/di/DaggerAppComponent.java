// Generated by Dagger (https://google.github.io/dagger).
package dev.rodni.ru.googlemapsandplaces.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dev.rodni.ru.googlemapsandplaces.NearbyFriendsApplication;
import dev.rodni.ru.googlemapsandplaces.data.database.entities.userdata.User;
import dev.rodni.ru.googlemapsandplaces.ui.login.LoginActivity;
import dev.rodni.ru.googlemapsandplaces.ui.login.LoginActivity_MembersInjector;
import dev.rodni.ru.googlemapsandplaces.ui.mainpage.ListChatsFragment;
import dev.rodni.ru.googlemapsandplaces.ui.mainpage.ListChatsFragment_MembersInjector;
import dev.rodni.ru.googlemapsandplaces.ui.registration.RegisterActivity;
import dev.rodni.ru.googlemapsandplaces.ui.registration.RegisterActivity_MembersInjector;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>
      loginActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Factory>
      registerActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent.Factory>
      listChatsFragmentSubcomponentFactoryProvider;

  private Provider<User> userProvider;

  private DaggerAppComponent(Application application) {

    initialize(application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(
        LoginActivity.class,
        (Provider) loginActivitySubcomponentFactoryProvider,
        RegisterActivity.class,
        (Provider) registerActivitySubcomponentFactoryProvider,
        ListChatsFragment.class,
        (Provider) listChatsFragmentSubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application application) {
    this.loginActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory
              get() {
            return new LoginActivitySubcomponentFactory();
          }
        };
    this.registerActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
                .Factory>() {
          @Override
          public ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
                  .Factory
              get() {
            return new RegisterActivitySubcomponentFactory();
          }
        };
    this.listChatsFragmentSubcomponentFactoryProvider =
        new Provider<
            ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent.Factory>() {
          @Override
          public ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent.Factory
              get() {
            return new ListChatsFragmentSubcomponentFactory();
          }
        };
    this.userProvider = DoubleCheck.provider(AppModule_UserFactory.create());
  }

  @Override
  public void inject(NearbyFriendsApplication arg0) {
    injectNearbyFriendsApplication(arg0);
  }

  @CanIgnoreReturnValue
  private NearbyFriendsApplication injectNearbyFriendsApplication(
      NearbyFriendsApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class LoginActivitySubcomponentFactory
      implements ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivity arg0) {}

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      LoginActivity_MembersInjector.injectUserSingleton(
          instance, DaggerAppComponent.this.userProvider.get());
      return instance;
    }
  }

  private final class RegisterActivitySubcomponentFactory
      implements ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
          .Factory {
    @Override
    public ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent create(
        RegisterActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegisterActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegisterActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent {
    private RegisterActivitySubcomponentImpl(RegisterActivity arg0) {}

    @Override
    public void inject(RegisterActivity arg0) {
      injectRegisterActivity(arg0);
    }

    @CanIgnoreReturnValue
    private RegisterActivity injectRegisterActivity(RegisterActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      RegisterActivity_MembersInjector.injectUserSingleton(
          instance, DaggerAppComponent.this.userProvider.get());
      return instance;
    }
  }

  private final class ListChatsFragmentSubcomponentFactory
      implements ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent
          .Factory {
    @Override
    public ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent create(
        ListChatsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ListChatsFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ListChatsFragmentSubcomponentImpl
      implements ActivityBuilderModule_ContributeMainActivity.ListChatsFragmentSubcomponent {
    private ListChatsFragmentSubcomponentImpl(ListChatsFragment arg0) {}

    @Override
    public void inject(ListChatsFragment arg0) {
      injectListChatsFragment(arg0);
    }

    @CanIgnoreReturnValue
    private ListChatsFragment injectListChatsFragment(ListChatsFragment instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      ListChatsFragment_MembersInjector.injectUserSingleton(
          instance, DaggerAppComponent.this.userProvider.get());
      return instance;
    }
  }
}
